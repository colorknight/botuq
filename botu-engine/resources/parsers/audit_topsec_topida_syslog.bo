botu("Audit/Topsec/TopIDA/Syslog") {
    splitParse(MS_SRC_DATA, ' ', '"', '"', "=");
    switch(s_protocol) {
        case "DNP3":
			pack("event") {
                START_TIME = format2Time(toTime(time), "E MMM dd HH:mm:ss z yyyy");
                DS_PROCESS_NAME = recorder;
                EVT_CATEGORY = s_protocol;
                SEVERITY = i_warninglevel;
                N_EVT_CATEGORY = "/Audit";
                N_SEVERITY = dictMapping("severity",i_warninglevel);
                SBJ_TYPE = "/Ip";
                SBJ_NAME = i_srcip;
                SBJ_IP = i_srcip;
                SBJ_MAC = convert2Mac(s_srcmac);
                SBJ_PORT = i_srcport;
                BHV_CATEGORY = "/Access";
                TRANS_PROTO = i_ipproto;
                APP_PROTO = s_protocol;
                OBJ_TYPE = "/Ip";
                OBJ_NAME = i_dstip;
                OBJ_IP = i_dstip;
                OBJ_MAC = convert2Mac(s_dstmac);
                OBJ_PORT = i_dstport;
                OUTCOME = s_dnp3_briefly;
			}
        case "EthernetIP":
            pack("event") {
                START_TIME = format2Time(toTime(time), "E MMM dd HH:mm:ss z yyyy");
                DS_PROCESS_NAME = recorder;
                EVT_CATEGORY = s_protocol;
                SEVERITY = i_warninglevel;
                N_EVT_CATEGORY = "/Audit";
                N_SEVERITY = dictMapping("severity",i_warninglevel);
                SBJ_TYPE = "/Ip";
                SBJ_NAME = i_srcip;
                SBJ_IP = i_srcip;
                SBJ_MAC = convert2Mac(s_srcmac);
                SBJ_PORT = i_srcport;
                BHV_CATEGORY = "/Access";
                TRANS_PROTO = i_ipproto;
                APP_PROTO = s_protocol;
                OBJ_TYPE = "/Ip";
                OBJ_NAME = i_dstip;
                OBJ_IP = i_dstip;
                OBJ_MAC = convert2Mac(s_dstmac);
                OBJ_PORT = i_dstport;
                OUTCOME = s_cip_brief_introduction;
			}
        case "IEC104":
            pack("event") {
                START_TIME = format2Time(toTime(time), "E MMM dd HH:mm:ss z yyyy");
                DS_PROCESS_NAME = recorder;
                EVT_CATEGORY = s_protocol;
                SEVERITY = i_warninglevel;
                N_EVT_CATEGORY = "/Audit";
                N_SEVERITY = dictMapping("severity",i_warninglevel);
                SBJ_TYPE = "/Ip";
                SBJ_IP = i_srcip;
                SBJ_NAME = i_srcip;
                SBJ_MAC = convert2Mac(s_srcmac);
                SBJ_PORT = i_srcport;
                BHV_CATEGORY = "/Access";
                TRANS_PROTO = i_ipproto;
                APP_PROTO = s_protocol;
                OBJ_TYPE = "/Ip";
                OBJ_NAME = i_dstip;
                OBJ_IP = i_dstip;
                OBJ_MAC = convert2Mac(s_dstmac);
                OBJ_PORT = i_dstport;
                OUTCOME = s_decm_briefly_str;
			}
        case "IEC61850_MMS":
			pack("event") {
                START_TIME = format2Time(toTime(time), "E MMM dd HH:mm:ss z yyyy");
                DS_PROCESS_NAME = recorder;
                EVT_CATEGORY = s_protocol;
                SEVERITY = i_warninglevel;
                N_EVT_CATEGORY = "/Audit";
                N_SEVERITY = dictMapping("severity",i_warninglevel);
                SBJ_TYPE = "/Ip";
                SBJ_NAME = i_srcip;
                SBJ_IP = i_srcip;
                SBJ_MAC = convert2Mac(s_srcmac);
                SBJ_PORT = i_srcport;
                BHV_CATEGORY = "/Access";
                TRANS_PROTO = i_ipproto;
                APP_PROTO = s_protocol;
                OBJ_TYPE = "/Ip";
                OBJ_NAME = i_dstip;
                OBJ_IP = i_dstip;
                OBJ_MAC = convert2Mac(s_dstmac);
                OBJ_PORT = i_dstport;
                OUTCOME = s_decm_briefly_str;
			}
        case "Modbus":
            pack("event") {
                START_TIME = format2Time(toTime(time), "E MMM dd HH:mm:ss z yyyy");
                DS_PROCESS_NAME = recorder;
                EVT_CATEGORY = s_protocol;
                SEVERITY = i_warninglevel;
                N_EVT_CATEGORY = "/Audit";
                N_SEVERITY = dictMapping("severity",i_warninglevel);
                SBJ_TYPE = "/Ip";
                SBJ_NAME = i_srcip;
                SBJ_IP = i_srcip;
                SBJ_MAC = convert2Mac(s_srcmac);
                SBJ_PORT = i_srcport;
                BHV_CATEGORY = "/Access";
                TRANS_PROTO = i_ipproto;
                APP_PROTO = s_protocol;
                OBJ_TYPE = "/Ip";
                OBJ_NAME = i_dstip;
                OBJ_IP = i_dstip;
                OBJ_MAC = convert2Mac(s_dstmac);
                OBJ_PORT = i_dstport;
                OUTCOME = s_decm_briefly_str;
			}
        case "OPCDA":
			pack("event") {
                START_TIME = format2Time(toTime(time), "E MMM dd HH:mm:ss z yyyy");
                DS_PROCESS_NAME = recorder;
                EVT_CATEGORY = s_protocol;
                SEVERITY = i_warninglevel;
                N_EVT_CATEGORY = "/Audit";
                N_SEVERITY = dictMapping("severity",i_warninglevel);
                SBJ_TYPE = "/Ip";
                SBJ_NAME = i_srcip;
                SBJ_IP = i_srcip;
                SBJ_MAC = convert2Mac(s_srcmac);
                SBJ_PORT = i_srcport;
                BHV_CATEGORY = "/Access";
                TRANS_PROTO = i_ipproto;
                APP_PROTO = s_protocol;
                OBJ_TYPE = "/Ip";
                OBJ_NAME = i_dstip;
                OBJ_IP = i_dstip;
                OBJ_MAC = convert2Mac(s_dstmac);
                OBJ_PORT = i_dstport;
                OUTCOME = s_decm_briefly_str;
			}
        case "OPCUA":
			pack("event") {
                START_TIME = format2Time(toTime(time), "E MMM dd HH:mm:ss z yyyy");
                DS_PROCESS_NAME = recorder;
                EVT_CATEGORY = s_protocol;
                SEVERITY = i_warninglevel;
                N_EVT_CATEGORY = "/Audit";
                N_SEVERITY = dictMapping("severity",i_warninglevel);
                SBJ_TYPE = "/Ip";
                SBJ_NAME = i_srcip;
                SBJ_IP = i_srcip;
                SBJ_MAC = convert2Mac(s_srcmac);
                SBJ_PORT = i_srcport;
                BHV_CATEGORY = "/Access";
                TRANS_PROTO = i_ipproto;
                APP_PROTO = s_protocol;
                OBJ_TYPE = "/Ip";
                OBJ_NAME = i_dstip;
                OBJ_IP = i_dstip;
                OBJ_MAC = convert2Mac(s_dstmac);
                OBJ_PORT = i_dstport;
                OUTCOME = s_response_param;
                REQ_PARAMS = s_request_param;
                OUTCOME = s_decm_briefly_str;
			}
        case "Profinet":
			pack("event") {
                START_TIME = format2Time(toTime(time), "E MMM dd HH:mm:ss z yyyy");
                DS_PROCESS_NAME = recorder;
                EVT_CATEGORY = s_pro_block_type;
                SEVERITY = i_warninglevel;
                N_EVT_CATEGORY = "/Audit";
                N_SEVERITY = dictMapping("severity",i_warninglevel);
                SBJ_TYPE = "/Ip";
                SBJ_NAME = i_srcip;
                SBJ_IP = i_srcip;
                SBJ_MAC = convert2Mac(s_srcmac);
                SBJ_PORT = i_srcport;
                BHV_CATEGORY = "/Access";
                TRANS_PROTO = i_ipproto;
                APP_PROTO = s_protocol;
                OBJ_TYPE = "/Ip";
                OBJ_NAME = i_dstip;
                OBJ_IP = i_dstip;
                OBJ_MAC = convert2Mac(s_dstmac);
                OBJ_PORT = i_dstport;
                OUTCOME = s_pro_data;
			}
        case "Siemens_S7":
			pack("event") {
                START_TIME = format2Time(toTime(time), "E MMM dd HH:mm:ss z yyyy");
                DS_PROCESS_NAME = recorder;
                EVT_CATEGORY = s_protocol;
                SEVERITY = i_warninglevel;
                N_EVT_CATEGORY = "/Audit";
                N_SEVERITY = dictMapping("severity",i_warninglevel);
                SBJ_TYPE = "/Ip";
                SBJ_NAME = i_srcip;
                SBJ_IP = i_srcip;
                SBJ_MAC = convert2Mac(s_srcmac);
                SBJ_PORT = i_srcport;
                BHV_CATEGORY = "/Access";
                TRANS_PROTO = i_ipproto;
                APP_PROTO = s_protocol;
                OBJ_TYPE = "/Ip";
                OBJ_NAME = i_dstip;
                OBJ_IP = i_dstip;
                OBJ_MAC = convert2Mac(s_dstmac);
                OBJ_PORT = i_dstport;
                OUTCOME = s_s7comm_cla_briefly;
			}
        default:
			pack() {
			}
    }
}