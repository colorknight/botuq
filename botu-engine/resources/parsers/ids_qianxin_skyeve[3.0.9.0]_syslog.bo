botu("IDS/Qianxin/SkyEve[3.0.9.0]/Syslog"){
   splitParse(MS_SRC_DATA, '|', '"', '"',null);
   ip = subString($2,1);
   cat = subString($3,1);
   detail = subString($4,1);
   switch(cat){
        case "log":
            pack("event"){
                START_TIME = format2Time($1, "yyyy-MM-dd HH:mm:ss");
                EVT_CATEGORY = cat;
                SEVERITY = "info";
                N_EVT_CATEGORY = "/Audit/System";
                N_SEVERITY = dictMapping("severity", "info");
                SBJ_TYPE= "/Ip";
                SBJ_NAME = ip;
                SBJ_IP = ip;
                BHV_CATEGORY = "/Is";
                OUTCOME = detail;
            }
        case "webids-ids_dolog":
            jsonParse(detail, true);
            phrase = regExtract(kill_chain_all, "([^:]+):.*");
            sev = parseSyslogSeverity(severity);
            pack("event"){
                START_TIME = format2Time($1, "yyyy-MM-dd HH:mm:ss");
                EVT_CATEGORY = cat;
                EVT_TYPE = vuln_type;
                EVT_ID = rule_id;
                EVT_NAME = rule_name;
                SEVERITY = sev;
                N_EVT_CATEGORY = "/Threat/Attack";
                N_SEVERITY = dictMapping("severity", sev);
                PHRASE = phrase;
                SBJ_TYPE= "/Ip";
                SBJ_NAME = attacker;
                SBJ_IP = sip;
                SBJ_PORT = sport;
                BHV_CATEGORY = "/Attack";
                BEHAVIOR = attack_method;
                TECHNICAL = attack_type;
                APP_PROTO = protocol_id;
                OBJ_TYPE = "/Ip";
                OBJ_NAME = victim;
                OBJ_IP = dip;
                OBJ_PORT = dport;
                OUTCOME = detail_info;
                PRT_STATUS = attack_result;
                CONFIDENCE = confidence;
                SOLUTION = bulletin;
                PLD_TYPE = "Bin";
                PLD_SIZE = packet_size;
                PLD_CONTENT = packet_data;
            }
        case "webids-webattack_dolog":
            jsonParse(detail, true);
            phrase = regExtract(kill_chain_all, "([^:]+):.*");
            sev = parseSyslogSeverity(severity);
            pack("event"){
                START_TIME = format2Time($1, "yyyy-MM-dd HH:mm:ss");
                EVT_CATEGORY = cat;
                EVT_TYPE = vuln_type;
                EVT_ID = rule_id;
                EVT_NAME = rule_name;
                SEVERITY = sev;
                N_EVT_CATEGORY = "/Threat/Attack/Vulnerability";
                N_SEVERITY = dictMapping("severity", sev);
                PHRASE = phrase;
                SBJ_TYPE= "/Ip";
                SBJ_NAME = attacker;
                SBJ_IP = sip;
                SBJ_PORT = sport;
                BHV_CATEGORY = "/Attack";
                TECHNICAL = strFormat("%s/%s", attack_type,vuln_name);
                OBJ_TYPE = "/Ip";
                OBJ_NAME = victim;
                OBJ_IP = dip;
                OBJ_PORT = dport;
                OUTCOME = detail_info;
                PRT_STATUS = attack_result;
                CONFIDENCE = confidence;
                SOLUTION = solution;
                REQ_URL = uri;
                REQ_PARAMS = parameter;
                REQ_XFF = xff;
                REQ_REFERER = referer;
                REQ_COOKIE = cookie;
                REQ_USER_AGENT = agent;
                REP_CONTENT_TYPE = rsp_content_type;
                REP_CONTENT_LENGTH = rsp_content_length;
            }
        case "webids-ioc_dolog":
            jsonParse(detail, true);
            phrase = regExtract(kill_chain_all, "([^:]+):.*");
            sev = parseSyslogSeverity(severity);
            pack("event"){
                START_TIME = format2Time($1, "yyyy-MM-dd HH:mm:ss");
                EVT_CATEGORY = strFormat("%s/%s", cat, malicious_type);
                EVT_TYPE = malicious_family;
                EVT_ID = tid;
                EVT_NAME = rule_desc;
                SEVERITY = sev;
                N_EVT_CATEGORY = "/Threat/Attack";
                N_SEVERITY = dictMapping("severity", sev);
                PHRASE = phrase;
                SBJ_TYPE= "/Ip";
                SBJ_NAME = sip;
                SBJ_IP = sip;
                SBJ_PORT = sport;
                BHV_CATEGORY = "/Attack";
                TECHNICAL = attack_type;
                TRANS_PROTO = tproto;
                APP_PROTO = proto;
                OBJ_TYPE = "/Host";
                OBJ_NAME = host;
                OBJ_HOST = host;
                OBJ_IP = dip;
                OBJ_PORT = dport;
                OBJ_OS = platform;
                SOLUTION = desc;
                CONFIDENCE = confidence;
                PRT_STATUS = attack_result;
                PLD_TYPE = "Bin";
                PLD_CONTENT = packet_data;
            }
        case "webids-webshell_dolog":
            jsonParse(detail, true);
            phrase = regExtract(kill_chain_all, "([^:]+):.*");
            sev = parseSyslogSeverity(severity);
            pack("event"){
                START_TIME = format2Time($1, "yyyy-MM-dd HH:mm:ss");
                EVT_CATEGORY = cat;
                EVT_TYPE = attack_type;
                EVT_NAME = rule_name;
                SEVERITY = sev;
                N_EVT_CATEGORY = "/Threat/Attack";
                N_SEVERITY = dictMapping("severity", sev);
                PHRASE = phrase;
                SBJ_TYPE= "/Ip";
                SBJ_NAME = attacker;
                SBJ_IP = sip;
                SBJ_PORT = sport;
                BHV_CATEGORY = "/Access";
                TECHNICAL = attack_type;
                OBJ_TYPE = "/Host";
                OBJ_NAME = host;
                OBJ_HOST = host;
                OBJ_IP = dip;
                OBJ_PORT = dport;
                OUTCOME = detail_info;
                PRT_STATUS = attack_result;
                CONFIDENCE = confidence;
                REQ_URL = url;
                REQ_PARAMS = parameter;
                REQ_XFF = xff;
                PLD_TYPE = "/Resource/File";
                PLD_NAME = file;
                PLD_SIG = file_md5;
            }
        default:
            pack(){}
   }
}