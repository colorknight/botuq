botu("ACM/DPtech/UAG3000/Syslog") {
    if (patternParse(MS_SRC_DATA, "^\\<(?<pri>\\d+)\\>(?<time>[^\\s]+ \\d+:\\d+:\\d+) (?<dev>[^\\s]+) %%.*/(?<module>[^/]+)/\\d/[^\\)]+\\): (?<msg>.*)")) {
        sev = parseSyslogSeverity(pri);
        switch(module) {
            case "DEVM":
                if (patternParse(msg, "The use of cpu is too high:\\s+(?<percent>\\d+).*")) {
                    sbjType = "/Resource/CPU";
                    nCat = "/HiddenDanger";
                } else if (patternParse(msg, "The use of memory is too high:\\s+(?<percent>\\d+).*")) {
                    sbjType = "/Resource/Memory";
                    nCat = "/HiddenDanger";
                } else if (patternParse(msg, "The .* will be full:\\s+(?<percent>\\d+).*")) {
                    sbjType = "/Resource/Disk";
                    nCat = "/HiddenDanger";
                } else if (patternParse(msg, "The temperature of CPU.*")) {
                    sbjType = "/Resource/CPU";
                    nCat = "/Audit/Status";
                } else {
                    sbjType = "/Resource/Hardware";
                    nCat = "/Audit/Status";
                }
                pack("event") {
                    START_TIME = format2Time(time, "yyyy-MM-dd HH:mm:ss");
                    DS_DVC_NAME = dev;
                    DS_PROCESS_NAME = module;
                    EVT_CATEGORY = "/Status";
                    SEVERITY = sev;
                    N_EVT_CATEGORY = nCat;
                    N_SEVERITY = dictMapping("severity",sev);
                    SBJ_TYPE = sbjType;
                    SBJ_HOST = dev;
                    SBJ_IP = MS_SRC_ADDRESS;
                    BHV_CATEGORY = "/Is";
                    STATUS = percent;
                    OUTCOME = msg;
                }
            case "SNMP":
                pack("event") {
                    START_TIME = format2Time(time, "yyyy-MM-dd HH:mm:ss");
                    DS_DVC_NAME = dev;
                    DS_PROCESS_NAME = module;
                    EVT_CATEGORY = "/Audit/System";
                    N_EVT_CATEGORY = "/Audit/System";
                    SEVERITY = sev;
                    N_SEVERITY = dictMapping("severity",sev);
                    SBJ_TYPE = "/Host";
                    SBJ_HOST = dev;
                    SBJ_IP = MS_SRC_ADDRESS;
                    OUTCOME = msg;
                }
            case "ifmd":
                pack("event") {
                    START_TIME = format2Time(time, "yyyy-MM-dd HH:mm:ss");
                    DS_DVC_NAME = dev;
                    DS_PROCESS_NAME = module;
                    EVT_CATEGORY = "/Status";
                    N_EVT_CATEGORY = "/Audit/Status";
                    SEVERITY = sev;
                    N_SEVERITY = dictMapping("severity",sev);
                    SBJ_TYPE = "/Resource/Interface";
                    SBJ_HOST = dev;
                    SBJ_IP = MS_SRC_ADDRESS;
                    BHV_CATEGORY = "/Is";
                    OUTCOME = msg;
                }
            case "WEB":
                if (patternParse(msg, ".*\\(87\\):(?<result>\\d+);User \\[(?<user>[^\\]]+)\\][^\\[]+\\[(?<src>[^\\]]+).*")) {
                    bhv = "/Login";
                } else if (patternParse(msg, ".*\\(87\\):(?<result>\\d+);User: \\[(?<user>[^\\]]+)\\] \\(IP address: (?<src>[^\\s]+) \\).*")) {
                    bhv = "/Logout";
                }
                pack("event"){
                    START_TIME = format2Time(time, "yyyy-MM-dd HH:mm:ss");
                    DS_DVC_NAME = dev;
                    DS_PROCESS_NAME = module;
                    EVT_CATEGORY = "/Audit/System";
                    N_EVT_CATEGORY = "/Audit/System";
                    SEVERITY = sev;
                    N_SEVERITY = dictMapping("severity",sev);
                    SBJ_TYPE = "/User";
                    SBJ_NAME = user;
                    SBJ_IP = src;
                    BHV_CATEGORY = bhv;
                    OBJ_TYPE = "/Host";
                    OBJ_HOST = dev;
                    OBJ_IP = MS_SRC_ADDRESS;
                    STATUS = result;
                    OUTCOME = msg;
                }
        }
    } else if (patternParse(MS_SRC_DATA, "^(?<time>\\w+\\s+\\d+ \\d+:\\d+:\\d+ \\d*) (?<dev>[^\\s]+) %%.*/(?<module>[^/]+)/(?<sev>\\d+)/[^\\)]+\\): (?<msg>.*)")) {
        splitParse(msg, ';',null,null,":");
        appProto = regExtract(field("protocol-name(17)"), "[^)]+\\)(.*)");
        logtype = field("log-type(1)");
        switch(logtype) {
            case "attack-protect":
                attackName = regExtract(field("attack-name(11)"), "[^)]+\\)(.*)");
                pack("event") {
                    START_TIME = format2Time(time, "MMM d HH:mm:ss yyyy");
                    DS_DVC_NAME = dev;
                    EVT_CATEGORY = logtype;
                    EVT_TYPE = attackName;
                    SEVERITY = sev;
                    N_EVT_CATEGORY = "/Threat/Attack";
                    N_SEVERITY = dictMapping("severity",sev);
                    SBJ_TYPE = "/Ip";
                    SBJ_NAME = field("source-ip(24)");
                    SBJ_IP = field("source-ip(24)");
                    SBJ_PORT = field("source-port(25)");
                    SBJ_INTERFACE = field("ifname-inside(29)");
                    BHV_CATEGORY = "/Attack";
                    TECHNICAL = attackName;
                    TRANS_PROTO = dictMapping("trans_protocol",toInt(field("ip-proto-id")));
                    APP_PROTO = appProto;
                    OBJ_TYPE = "/Ip";
                    OBJ_NAME = field("destination-ip(26)");
                    OBJ_IP = field("destination-ip(26)");
                    OBJ_PORT = field("destination-port(27)");
                    OBJ_INTERFACE = field("ifname-outside(30)");
                    PRT_ACTION = field("event(2)");
                    PRT_STATUS = "/Solved";
                }
            case "av-protect":
                avName = regExtract(field("av-name(15)"), "[^)]+\\)(.*)");
                pack("event") {
                    START_TIME = format2Time(time, "MMM d HH:mm:ss yyyy");
                    DS_DVC_NAME = dev;
                    EVT_CATEGORY = logtype;
                    EVT_TYPE = avName;
                    EVT_NAME = avName;
                    SEVERITY = sev;
                    N_EVT_CATEGORY = "/Threat/Malware";
                    N_SEVERITY = dictMapping("severity",sev);
                    SBJ_TYPE = "/Ip";
                    SBJ_NAME = field("source-ip(24)");
                    SBJ_IP = field("source-ip(24)");
                    SBJ_PORT = field("source-port(25)");
                    SBJ_INTERFACE = field("ifname-inside(29)");
                    BHV_CATEGORY = "/Attack";
                    TECHNICAL = avName;
                    TRANS_PROTO = dictMapping("trans_protocol",toInt(ip-proto-id));
                    APP_PROTO = appProto;
                    OBJ_TYPE = "/Ip";
                    OBJ_NAME = field("destination-ip(26)");
                    OBJ_IP = field("destination-ip(26)");
                    OBJ_PORT = field("destination-port(27)");
                    OBJ_INTERFACE = field("ifname-outside(30)");
                    PRT_ACTION = field("event(2)");
                    PRT_STATUS = "/Solved";
                }
        }
    }
}