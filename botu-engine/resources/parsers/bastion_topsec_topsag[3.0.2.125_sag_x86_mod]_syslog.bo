botu("Bastion/Topsec/TopSAG[3.0.2.125_SAG_x86_MOD]/Syslog") {
    splitParse(MS_SRC_DATA, ' ', '"', '"', "=");
    switch(recorder) {
        case "user_auth":
            pack("event") {
                START_TIME = format2Time(time, "yyyy-MM-dd HH:mm:ss");
                DS_DVC_NAME = dev;
                DS_PROCESS_NAME = recorder;
                EVT_CATEGORY = type;
                EVT_TYPE = subtype;
                SEVERITY = pri;
                N_EVT_CATEGORY = "/Audit";
                N_SEVERITY = dictMapping("severity",pri);
                SBJ_TYPE = "/User";
                SBJ_NAME = user;
                SBJ_IP = src;
                BHV_CATEGORY = dictMapping("bhv_category", op);
                BEHAVIOR = op;
                OBJ_TYPE = "/Ip";
                OBJ_NAME = MS_SRC_ADDRESS;
                OBJ_IP = MS_SRC_ADDRESS;
                OUTCOME = msg;
            }
        case "sso":
            pack("event") {
                START_TIME = format2Time(time, "yyyy-MM-dd HH:mm:ss");
                DS_DVC_NAME = dev;
                DS_PROCESS_NAME = recorder;
                EVT_CATEGORY = type;
                EVT_TYPE = subtype;
                SEVERITY = pri;
                N_EVT_CATEGORY = "/Audit";
                N_SEVERITY = dictMapping("severity",pri);
                SBJ_TYPE = "/User";
                SBJ_NAME = user;
                SBJ_IP = src;
                BHV_CATEGORY = dictMapping("bhv_category", op);
                BEHAVIOR = op;
                APP_PROTO = protoname;
                OBJ_TYPE = "/Host";
                OBJ_NAME = assetName;
                OBJ_HOST = assetName;
                OBJ_IP = assetIp;
                OUTCOME = msg;
            }
        case "examine":
            pack("event") {
                START_TIME = format2Time(time, "yyyy-MM-dd HH:mm:ss");
                DS_DVC_NAME = dev;
                DS_PROCESS_NAME = recorder;
                EVT_CATEGORY = type;
                EVT_TYPE = subtype;
                SEVERITY = pri;
                N_EVT_CATEGORY = "/Audit";
                N_SEVERITY = dictMapping("severity",pri);
                SBJ_TYPE = "/User";
                SBJ_NAME = user;
                SBJ_IP = src;
                BHV_CATEGORY = dictMapping("bhv_category", op);
                BEHAVIOR = op;
                OBJ_TYPE = "/Resource/Account";
                OBJ_NAME = account;
                OUTCOME = msg;
            }
        case "user":
            pack("event") {
                START_TIME = format2Time(time, "yyyy-MM-dd HH:mm:ss");
                DS_DVC_NAME = dev;
                DS_PROCESS_NAME = recorder;
                EVT_CATEGORY = type;
                EVT_TYPE = subtype;
                SEVERITY = pri;
                N_EVT_CATEGORY = "/Audit";
                N_SEVERITY = dictMapping("severity",pri);
                SBJ_TYPE = "/User";
                SBJ_NAME = user;
                SBJ_IP = src;
                BHV_CATEGORY = dictMapping("bhv_category", op);
                BEHAVIOR = op;
                OBJ_TYPE = "/Resource/Account";
                OBJ_NAME = name;
                OUTCOME = msg;
            }
        case "usergroup":
            pack("event") {
                START_TIME = format2Time(time, "yyyy-MM-dd HH:mm:ss");
                DS_DVC_NAME = dev;
                DS_PROCESS_NAME = recorder;
                EVT_CATEGORY = type;
                EVT_TYPE = subtype;
                SEVERITY = pri;
                N_EVT_CATEGORY = "/Audit";
                N_SEVERITY = dictMapping("severity",pri);
                SBJ_TYPE = "/User";
                SBJ_NAME = user;
                SBJ_IP = src;
                BHV_CATEGORY = dictMapping("bhv_category", op);
                BEHAVIOR = op;
                OBJ_TYPE = "/Resource/Configuration";
                OBJ_NAME = groupName;
                OUTCOME = msg;
            }
        case "department":
        case "network":
        case "assetgroup":
        case "passwordChange":
        case "passwordEnvelope":
        case "author":
        case "rule":
        case "report":
        case "setting":
            bhv = op;
            if (op == "start" || op == "stop") {
                bhv = "update";
            }
            pack("event") {
                START_TIME = format2Time(time, "yyyy-MM-dd HH:mm:ss");
                DS_DVC_NAME = dev;
                DS_PROCESS_NAME = recorder;
                EVT_CATEGORY = type;
                EVT_TYPE = subtype;
                SEVERITY = pri;
                N_EVT_CATEGORY = "/Audit";
                N_SEVERITY = dictMapping("severity",pri);
                SBJ_TYPE = "/User";
                SBJ_NAME = user;
                SBJ_IP = src;
                BHV_CATEGORY = dictMapping("bhv_category", bhv);
                BEHAVIOR = op;
                OBJ_TYPE = "/Resource/Configuration";
                OBJ_NAME = name;
                STATUS = state;
                OUTCOME = msg;
            }
        case "role":
            pack("event") {
                START_TIME = format2Time(time, "yyyy-MM-dd HH:mm:ss");
                DS_DVC_NAME = dev;
                DS_PROCESS_NAME = recorder;
                EVT_CATEGORY = type;
                EVT_TYPE = subtype;
                SEVERITY = pri;
                N_EVT_CATEGORY = "/Audit";
                N_SEVERITY = dictMapping("severity",pri);
                SBJ_TYPE = "/User";
                SBJ_NAME = user;
                SBJ_IP = src;
                BHV_CATEGORY = dictMapping("bhv_category", op);
                BEHAVIOR = op;
                OBJ_TYPE = "/Resource/Role";
                OBJ_NAME = name;
                OUTCOME = msg;
            }
        case "attestation":
            pack("event") {
                START_TIME = format2Time(time, "yyyy-MM-dd HH:mm:ss");
                DS_DVC_NAME = dev;
                DS_PROCESS_NAME = recorder;
                EVT_CATEGORY = type;
                EVT_TYPE = subtype;
                SEVERITY = pri;
                N_EVT_CATEGORY = "/Audit";
                N_SEVERITY = dictMapping("severity",pri);
                SBJ_TYPE = "/User";
                SBJ_NAME = user;
                SBJ_IP = src;
                BHV_CATEGORY = dictMapping("bhv_category", op);
                BEHAVIOR = op;
                OBJ_TYPE = "/Host";
                OBJ_NAME = name;
                OBJ_HOST = name;
                OBJ_IP = ip;
                OBJ_PORT = port;
                OUTCOME = msg;
            }
        case "asset":
            pack("event") {
                START_TIME = format2Time(time, "yyyy-MM-dd HH:mm:ss");
                DS_DVC_NAME = dev;
                DS_PROCESS_NAME = recorder;
                EVT_CATEGORY = type;
                EVT_TYPE = subtype;
                SEVERITY = pri;
                N_EVT_CATEGORY = "/Audit";
                N_SEVERITY = dictMapping("severity",pri);
                SBJ_TYPE = "/User";
                SBJ_NAME = user;
                SBJ_IP = src;
                BHV_CATEGORY = dictMapping("bhv_category", op);
                BEHAVIOR = op;
                OBJ_TYPE = "/Host";
                OBJ_NAME = assetName;
                OBJ_HOST = assetName;
                OBJ_IP = assetIp;
                OUTCOME = msg;
            }
        case "application":
            pack("event") {
                START_TIME = format2Time(time, "yyyy-MM-dd HH:mm:ss");
                DS_DVC_NAME = dev;
                DS_PROCESS_NAME = recorder;
                EVT_CATEGORY = type;
                EVT_TYPE = subtype;
                SEVERITY = pri;
                N_EVT_CATEGORY = "/Audit";
                N_SEVERITY = dictMapping("severity",pri);
                SBJ_TYPE = "/User";
                SBJ_NAME = user;
                SBJ_IP = src;
                BHV_CATEGORY = dictMapping("bhv_category", op);
                BEHAVIOR = op;
                OBJ_TYPE = "/Host";
                OBJ_NAME = name;
                OBJ_HOST = name;
                OBJ_IP = ip;
                STATUS = state;
                OUTCOME = msg;
            }
        case "log":
            pack("event") {
                START_TIME = format2Time(time, "yyyy-MM-dd HH:mm:ss");
                DS_DVC_NAME = dev;
                DS_PROCESS_NAME = recorder;
                EVT_CATEGORY = type;
                EVT_TYPE = subtype;
                SEVERITY = pri;
                N_EVT_CATEGORY = "/Audit";
                N_SEVERITY = dictMapping("severity",pri);
                SBJ_TYPE = "/User";
                SBJ_NAME = user;
                SBJ_IP = src;
                BHV_CATEGORY = dictMapping("bhv_category", op);
                BEHAVIOR = op;
                OBJ_TYPE = "/Resource/Other";
                OBJ_NAME = "Log";
                OUTCOME = msg;
            }
        case "operationRecord":
            pack("event") {
                START_TIME = format2Time(time, "yyyy-MM-dd HH:mm:ss");
                DS_DVC_NAME = dev;
                DS_PROCESS_NAME = recorder;
                EVT_CATEGORY = type;
                EVT_TYPE = subtype;
                SEVERITY = pri;
                N_EVT_CATEGORY = "/Audit";
                N_SEVERITY = dictMapping("severity",pri);
                SBJ_TYPE = "/User";
                SBJ_NAME = user;
                SBJ_IP = src;
                BHV_CATEGORY = "/Execute";
                BEHAVIOR = op;
                OUTCOME = msg;
            }
        case "alert":
            pack("event") {
                START_TIME = format2Time(time, "yyyy-MM-dd HH:mm:ss");
                DS_DVC_NAME = dev;
                DS_PROCESS_NAME = recorder;
                EVT_CATEGORY = type;
                EVT_TYPE = subtype;
                SEVERITY = pri;
                N_EVT_CATEGORY = "/Audit";
                N_SEVERITY = dictMapping("severity",pri);
                SBJ_TYPE = "/User";
                SBJ_NAME = user;
                SBJ_IP = src;
                BHV_CATEGORY = dictMapping("bhv_category", op);
                BEHAVIOR = op;
                OBJ_TYPE = "/Resource/Other";
                OBJ_NAME = alertName;
                OUTCOME = msg;
            }
    }

}